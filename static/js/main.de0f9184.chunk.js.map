{"version":3,"sources":["components/TodoInsert.js","components/TodoListItem.js","components/TodoList.js","components/TodoTemplate.js","App.js","reportWebVitals.js","index.js"],"names":["TodoInsert","onInsert","useState","value","setValue","onChange","useCallback","e","target","onSubmit","preventDefault","className","placeholder","type","TodoListItem","todo","onRemove","onToggle","style","id","text","checked","cn","onClick","React","memo","prevProps","nextProps","TodoList","todos","rowRenderer","index","key","width","height","rowCount","length","rowHeight","list","outline","TodoTemplate","children","createBulkTodos","array","i","push","todoReducer","action","concat","filter","map","App","useReducer","undefined","dispatch","nextId","useRef","current","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de0f9184.chunk.js","sourcesContent":["import React, { useCallback, useState } from 'react';\r\nimport { MdAdd } from 'react-icons/md';\r\nimport './TodoInsert.scss';\r\n// state를 통해 인풋의 상태를 관리하는 페이지\r\n\r\nconst TodoInsert = ({ onInsert }) => {\r\n  const [value, setValue] = useState('');\r\n\r\n  const onChange = useCallback((e) => {\r\n    setValue(e.target.value);\r\n  }, []);\r\n\r\n  const onSubmit = useCallback(\r\n    (e) => {\r\n      onInsert(value);\r\n      setValue('');\r\n\r\n      // submit 이벤트는 브라우저의 새로고침을 발생\r\n      // 이를 방지하기 위해 이 함수 호출\r\n      e.preventDefault();\r\n    },\r\n    [onInsert, value],\r\n  );\r\n  return (\r\n    <form className=\"TodoInsert\" onSubmit={onSubmit}>\r\n      <input\r\n        placeholder=\"할 일을 입력하세요\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n      <button type=\"submit\">\r\n        <MdAdd />\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TodoInsert;\r\n","import React from 'react';\r\nimport {\r\n  MdCheckBoxOutlineBlank,\r\n  MdCheckBox,\r\n  MdRemoveCircleOutline,\r\n} from 'react-icons/md';\r\nimport cn from 'classnames';\r\nimport './TodoListItem.scss';\r\n// todo 객체를 props로 받아 와서 상태에 따른 다른 스타일의 ui를 보여준다\r\nconst TodoListItem = ({ todo, onRemove, onToggle, style }) => {\r\n  const { id, text, checked } = todo;\r\n\r\n  return (\r\n    <div className=\"TodoListItem-virtualized\" style={style}>\r\n      <div className=\"TodoListItem\">\r\n        <div\r\n          className={cn('checkbox', { checked })}\r\n          onClick={() => onToggle(id)}\r\n        >\r\n          {checked ? <MdCheckBox /> : <MdCheckBoxOutlineBlank />}\r\n          <div className=\"text\">{text}</div>\r\n        </div>\r\n        <div className=\"remove\" onClick={() => onRemove(id)}>\r\n          <MdRemoveCircleOutline />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n// todo, onRemove, onToggle 바뀌지 않으면 리렌더링 하지 않는다\r\nexport default React.memo(\r\n  TodoListItem,\r\n  (prevProps, nextProps) => prevProps.todo === nextProps.todo,\r\n);\r\n","import React, { useCallback } from 'react';\r\nimport TodoListItem from './TodoListItem';\r\nimport './TodoList.scss';\r\nimport { List } from 'react-virtualized';\r\n\r\nconst TodoList = ({ todos, onRemove, onToggle }) => {\r\n  const rowRenderer = useCallback(\r\n    ({ index, key, style }) => {\r\n      const todo = todos[index];\r\n      return (\r\n        <TodoListItem\r\n          todo={todo}\r\n          key={key}\r\n          onRemove={onRemove}\r\n          onToggle={onToggle}\r\n          style={style}\r\n        />\r\n      );\r\n    },\r\n    [todos, onRemove, onToggle],\r\n  );\r\n  return (\r\n    <List\r\n      className=\"TodoList\"\r\n      width={512}\r\n      height={513}\r\n      rowCount={todos.length}\r\n      rowHeight={57}\r\n      rowRenderer={rowRenderer}\r\n      list={todos}\r\n      style={{ outline: 'none' }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default React.memo(TodoList);\r\n","import React from 'react';\r\nimport './TodoTemplate.scss';\r\n// 이 페이지는 children으로 내부 jsx를 props로 받아 와서 렌더링해준다\r\nconst TodoTemplate = ({ children }) => {\r\n  return (\r\n    <div className=\"TodoTemplate\">\r\n      <div className=\"app-title\">일정관리</div>\r\n      <div className=\"content\">{children}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoTemplate;\r\n","import React, { useCallback, useReducer, useRef, useState } from 'react';\r\nimport TodoInsert from './components/TodoInsert';\r\nimport TodoList from './components/TodoList';\r\nimport TodoTemplate from './components/TodoTemplate';\r\n// icon site = react-icons.netlify.com\r\n\r\nfunction createBulkTodos() {\r\n  const array = [];\r\n  for (let i = 1; i <= 2500; i++) {\r\n    array.push({\r\n      id: i,\r\n      text: `할 일 ${i}`,\r\n      checked: false,\r\n    });\r\n  }\r\n  return array;\r\n}\r\n\r\nfunction todoReducer(todos, action) {\r\n  switch (action.type) {\r\n    case 'INSERT':\r\n      return todos.concat(action.todo);\r\n    case 'REMOVE':\r\n      return todos.filter((todo) => todo.id !== action.id);\r\n    case 'TOGGLE':\r\n      return todos.map((todo) =>\r\n        todo.id === action.id ? { ...todo, checked: !todo.checked } : todo,\r\n      );\r\n    default:\r\n      return todos;\r\n  }\r\n}\r\nconst App = () => {\r\n  // 맨 처음 렌더링 될 때만 createBulkTodos 함수가 호출\r\n  const [todos, dispatch] = useReducer(todoReducer, undefined, createBulkTodos);\r\n  // const [todos, setTodos] = useState([\r\n  //   {\r\n  //     id: 1,\r\n  //     text: 'react의 기초 알아보기',\r\n  //     checked: true,\r\n  //   },\r\n  //   {\r\n  //     id: 2,\r\n  //     text: '컴포넌트 스타일 해보기',\r\n  //     checked: true,\r\n  //   },\r\n  //   {\r\n  //     id: 3,\r\n  //     text: '일정 관리 앱 만들어 보기',\r\n  //     checked: false,\r\n  //   },\r\n  // ]);\r\n\r\n  // 고유값으로 사용될 id\r\n  // ref를 사용하여 변수 담기\r\n  // useRef 사용한 이유 id값은 렌더링되는 정보가 아니기 대문\r\n  const nextId = useRef(2501);\r\n\r\n  const onInsert = useCallback((text) => {\r\n    const todo = {\r\n      id: nextId.current,\r\n      text,\r\n      checked: false,\r\n    };\r\n    dispatch({ type: 'INSERT', todo });\r\n    nextId.current += 1;\r\n  }, []);\r\n\r\n  const onRemove = useCallback((id) => {\r\n    dispatch({ type: 'REMOVE', id });\r\n  }, []);\r\n  const onToggle = useCallback((id) => {\r\n    dispatch({ type: 'TOGGLE', id });\r\n  });\r\n  // const onToggle = useCallback((id) => {\r\n  //   setTodos((todos) =>\r\n  //     todos.map((todo) =>\r\n  //       // id 값이 같을 때는 정해진 규칙대로 객체를 생성하지만 다를경우 그대로 반환\r\n  //       todo.id === id ? { ...todo, checked: !todo.checked } : todo,\r\n  //     ),\r\n  //   );\r\n  // });\r\n  return (\r\n    <TodoTemplate>\r\n      <TodoInsert onInsert={onInsert} />\r\n      {/* todolist에 props로 전달 */}\r\n      <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle} />\r\n    </TodoTemplate>\r\n  );\r\n};\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}